//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Fri 07-Dec-2012 by the VDM++ to JAVA Code Generator
// (v8.0 - Mon 09-Jul-2007 09:32:40)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import jp.co.csk.vdm.toolbox.VDM.jdk.*;
// ***** VDMTOOLS END Name=imports



public class Lifeline implements EvaluatePP {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=name KEEP=NO
  public volatile String name = null;
// ***** VDMTOOLS END Name=name

// ***** VDMTOOLS START Name=gates KEEP=NO
  public volatile Vector gates = null;
// ***** VDMTOOLS END Name=gates

// ***** VDMTOOLS START Name=fragments KEEP=NO
  public volatile HashMap fragments = new HashMap();
// ***** VDMTOOLS END Name=fragments

// ***** VDMTOOLS START Name=maxgates KEEP=NO
  public volatile Integer maxgates = null;
// ***** VDMTOOLS END Name=maxgates

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=LifelineSentinel KEEP=NO
  class LifelineSentinel extends Sentinel {

    public final int addGate = 0;

    public final int remGate = 1;

    public final int Lifeline = 2;

    public final int addFragment = 3;

    public final int remFragment = 4;

    public final int nr_functions = 5;


    public LifelineSentinel () throws CGException {}


    public LifelineSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=LifelineSentinel
;

// ***** VDMTOOLS START Name=evaluatePP KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=evaluatePP


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new LifelineSentinel(this);
    }
    catch (CGException e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=Lifeline KEEP=NO
  public Lifeline () throws CGException {
    try {

      setSentinel();
      gates = new Vector();
      fragments = new HashMap();
      maxgates = new Integer(99);
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Lifeline


// ***** VDMTOOLS START Name=Lifeline KEEP=NO
  public Lifeline (final String newName) throws CGException {

    try {

      setSentinel();
      gates = new Vector();
      fragments = new HashMap();
      maxgates = new Integer(99);
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
    name = UTIL.ConvertToString(UTIL.clone(newName));
  }
// ***** VDMTOOLS END Name=Lifeline


// ***** VDMTOOLS START Name=pre_Lifeline KEEP=NO
  public Boolean pre_Lifeline (final String newName) throws CGException {
    return new Boolean((new Integer(newName.length()).intValue()) > (new Integer(0).intValue()));
  }
// ***** VDMTOOLS END Name=pre_Lifeline


// ***** VDMTOOLS START Name=addGate KEEP=NO
  public void addGate (final Gate newGate) throws CGException {

    sentinel.entering(((LifelineSentinel) sentinel).addGate);
    try {
      gates.add(newGate);
    }
    finally {
      sentinel.leaving(((LifelineSentinel) sentinel).addGate);
    }
  }
// ***** VDMTOOLS END Name=addGate


// ***** VDMTOOLS START Name=addFragment KEEP=NO
  public void addFragment (final Fragment newFragment) throws CGException {

    sentinel.entering(((LifelineSentinel) sentinel).addFragment);
    try {

      HashMap rhs_2 = new HashMap();
      HashMap var2_4 = new HashMap();
      Integer tmpVar1_5 = null;
      HashSet unArg_6 = new HashSet();
      unArg_6.clear();
      unArg_6.addAll(fragments.keySet());
      tmpVar1_5 = new Integer(unArg_6.size());
      var2_4 = new HashMap();
      var2_4.put(tmpVar1_5, newFragment);
      {

        HashMap m1_13 = (HashMap) fragments.clone();
        HashMap m2_14 = var2_4;
        HashSet com_9 = new HashSet();
        com_9.addAll(m1_13.keySet());
        com_9.retainAll(m2_14.keySet());
        boolean all_applies_10 = true;
        Object d_11;
        for (Iterator bb_12 = com_9.iterator(); bb_12.hasNext() && all_applies_10; ) {

          d_11 = bb_12.next();
          all_applies_10 = m1_13.get(d_11).equals(m2_14.get(d_11));
        }
        if (!all_applies_10) 
          UTIL.RunTime("Run-Time Error:Map Merge: Incompatible maps");
        m1_13.putAll(m2_14);
        rhs_2 = m1_13;
      }
      fragments = (HashMap) UTIL.clone(rhs_2);
    }
    finally {
      sentinel.leaving(((LifelineSentinel) sentinel).addFragment);
    }
  }
// ***** VDMTOOLS END Name=addFragment


// ***** VDMTOOLS START Name=remGate KEEP=NO
  public void remGate (final Gate oldGate) throws CGException {

    sentinel.entering(((LifelineSentinel) sentinel).remGate);
    try {

      Vector momgates = new Vector();
      {

        HashSet iset_2 = new HashSet();
        HashSet set_10 = new HashSet();
        Enumeration enm_11 = gates.elements();
        while ( enm_11.hasMoreElements())
          set_10.add(enm_11.nextElement());
        iset_2 = set_10;
        Gate x = null;
        for (Iterator enm_17 = iset_2.iterator(); enm_17.hasNext(); ) {

          Gate elem_3 = (Gate) enm_17.next();
          x = (Gate) elem_3;
          if (new Boolean(!UTIL.equals(x, oldGate)).booleanValue()) 
            momgates.add(x);
        }
      }
      gates = (Vector) UTIL.ConvertToList(UTIL.clone(momgates));
    }
    finally {
      sentinel.leaving(((LifelineSentinel) sentinel).remGate);
    }
  }
// ***** VDMTOOLS END Name=remGate


// ***** VDMTOOLS START Name=pre_remGate KEEP=NO
  public Boolean pre_remGate (final Gate oldGate) throws CGException {

    Boolean varRes_2 = null;
    HashSet var2_4 = new HashSet();
    HashSet set_6 = new HashSet();
    Enumeration enm_7 = gates.elements();
    while ( enm_7.hasMoreElements())
      set_6.add(enm_7.nextElement());
    var2_4 = set_6;
    varRes_2 = new Boolean(var2_4.contains(oldGate));
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_remGate


// ***** VDMTOOLS START Name=remFragment KEEP=NO
  public void remFragment (final Fragment oldFragment) throws CGException {

    sentinel.entering(((LifelineSentinel) sentinel).remFragment);
    try {

      HashMap rhs_2 = new HashMap();
      HashSet var2_4 = new HashSet();
      var2_4 = new HashSet();
      var2_4.add(oldFragment);
      rhs_2 = fragments;
      {

        HashMap tmpMap_6 = new HashMap();
        HashSet domM_7 = new HashSet();
        domM_7.addAll(rhs_2.keySet());
        Object elm_8;
        for (Iterator bb_9 = domM_7.iterator(); bb_9.hasNext(); ) {

          elm_8 = bb_9.next();
          if (!var2_4.contains(rhs_2.get(elm_8))) 
            tmpMap_6.put(elm_8, rhs_2.get(elm_8));
        }
        rhs_2 = tmpMap_6;
      }
      fragments = (HashMap) UTIL.clone(rhs_2);
    }
    finally {
      sentinel.leaving(((LifelineSentinel) sentinel).remFragment);
    }
  }
// ***** VDMTOOLS END Name=remFragment


// ***** VDMTOOLS START Name=pre_remFragment KEEP=NO
  public Boolean pre_remFragment (final Fragment oldFragment) throws CGException {

    Boolean varRes_2 = null;
    varRes_2 = new Boolean(fragments.containsValue(oldFragment));
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_remFragment

}
;
